server:
  port: 9933
  servlet:
    context-path: /moon
    encoding:
      enabled: true
      charset: utf-8
spring:
  application:
    name: moon-api
  datasource:
    primary:
      type: com.alibaba.druid.pool.DruidDataSource
      driver-class-name: com.mysql.cj.jdbc.Driver
      url: jdbc:mysql://47.105.88.185:3306/moon?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&failOverReadOnly=false&serverTimezone=CST&useSLL=false
      username: root
      password: root
      #初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时，默认值为0
      initial-size: 5
      #最小连接池数量
      min-idle: 5
      #最大连接池数量，默认值为8
      max-active: 20
      # 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，默认启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁
      max-wait: 60000
      # 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。默认值为false
      poolPreparedStatements: false
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
      #maxOpenPreparedStatements：要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100，默认值为-1
      #用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。
      validation-query: select 'x'
      #建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。默认值为false
      test-while-idle: true
      #申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。默认值为true
      test-on-borrow: false
      #归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能默认值为false
      test-on-return: false
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat,wall
      log-slow-sql: true
      pool-prepared-statements: true
      max-open-prepared-statements: 50
      max-pool-prepared-statement-per-connection-size: 20
    secondary:
      type: com.alibaba.druid.pool.DruidDataSource
      driver-class-name: com.mysql.cj.jdbc.Driver
      url: jdbc:mysql://47.105.88.185:3306/moonSec?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&failOverReadOnly=false&serverTimezone=CST&useSLL=false
      username: root
      password: root
      #      password: Hxyc@2018
      # 下面为连接池的补充设置，应用到上面所有数据源中
      initial-size: 5
      min-idle: 5
      max-active: 20
      # 配置获取连接等待超时的时间
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
      validation-query: select 'x'
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat,wall
      log-slow-sql: true
      pool-prepared-statements: true
      max-open-prepared-statements: 50
      max-pool-prepared-statement-per-connection-size: 20
  cloud:
    consul:
      #配置端口
      port: 8500
      #配置consul服务器的host
        host: 47.104.250.22
      discovery:
        #配置服务注册
        register: true
        #是否启用服务发现
        enabled: true
        #服务停止时取消注册
        deregister: true
        #表示注册时不使用ip是hostname
        prefer-ip-address: false
        service-name: ${spring.application.name}
        hostname: ${spring.cloud.client.ip-address}
        #        instance-id: ${spring.application.name}:${spring.cloud.client.ip-address}:${server.port}
        #配置健康检查时间间隔
        health-check-interval: 10s
        #健康检查失败多长时间取消注册
        health-check-critical-timeout: 30s
        tags: api
        #配置健康检查路径
        health-check-path: ${server.servlet.context-path}/actuator/health
        instance-id: ${spring.application.name}:${spring.cloud.client.ip-address}:${server.port} #实例ID
        loadbalancer:
          ribbon:
            enabled: false
#    zookeeper:
#      connect-string: 192.168.100.238:12181
#      enabled: true
#      register: true
#      instance-host: ${spring.cloud.client.ip-address}  //自动获取启动服务的ip注册到zk注册中心

#  rabbitmq:
#    #    virtual-host: didi_order
#    host: 192.168.100.238
#    port: 5672
#    username: demo
#    password:  demopass
#    listener:
#      concurrency: 3
#      # 是否支持重试
#      retry:
#        enabled: false
redis:
  timeout: 10000 #客户端超时时间单位是毫秒 默认是2000
  maxIdle: 300 #最大空闲数
  maxTotal: 1000 #控制一个pool可分配多少个jedis实例,用来替换上面的redis.maxActive,如果是jedis 2.4以后用该属性
  maxWaitMillis: 1000 #最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制。
  minEvictableIdleTimeMillis: 300000 #连接的最小空闲时间 默认1800000毫秒(30分钟)
  numTestsPerEvictionRun: 1024 #每次释放连接的最大数目,默认3
  timeBetweenEvictionRunsMillis: 30000 #逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1
  testOnBorrow: true #是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个
  testWhileIdle: true #在空闲时检查有效性, 默认false
  password: redisPassW #密码
  cluster:
    nodes: 192.168.100.206:9001,192.168.100.206:9002,192.168.100.206:9003,192.168.100.206:9004,192.168.100.206:9005,192.168.100.206:9006
    max-redirects: 6

#management:
#  #  endpoints:
#  #    web:
#  #      exposure:
#  #        include: "*"
#  endpoint:
#    health:
#      show-details: always
#


  #  # 下面为连接池的补充设置，应用到上面所有数据源中
  #  initial-size: 5
  #  min-idle: 5
  #  max-active: 20
  #  # 配置获取连接等待超时的时间
  #  max-wait: 60000
  #  # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
  #  time-between-eviction-runs-millis: 60000
  #  # 配置一个连接在池中最小生存的时间，单位是毫秒
  #  min-evictable-idle-time-millis: 300000
  #  validation-query: select 'x'
  #  test-while-idle: true
  #  test-on-borrow: false
  #  test-on-return: false
  #  # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
  #  filters: stat,wall,log4j
  #  log-slow-sql: true
  #  pool-prepared-statements: true
  #  max-open-prepared-statements: 50
  #  max-pool-prepared-statement-per-connection-size: 20


  #mybatis配置
  #mybatis:
  #  config-location: classpath:mybatis/mybatis.cfg.xml
  #  type-aliases-package: com.hexing.taxi.*.entity,com.hexing.taxi.*.bean
  #  mapper-locations:
  #    - classpath:mybatis/mapper/**/*.xml



#mybatis配置
mybatis:
  config-location: classpath:mybatis/mybatis.cfg.xml
  type-aliases-package: com.moon.moon_commons.entity
  mapper-locations:
    - classpath:mybatis/mapper/**/*.xml

#日志配置
logging:
  config: classpath:logback-spring.xml